1. 서로소 집합(Disjoint Sets)
    - 공통 원소가 없는 두 집합
    ex) 집합 {1,2}와 집합{3,4}는 서로소집합이다. 반면에 {1,2}와 {2,3}은 2라는 원소가 두 집합에 공통적으로 포함되어 있기 때문에 서로소 관계가 아니다.

    - 서로소 집합 자료구조란 서로소 부분 집합들로 나누어진 원소들의 데이터를 처리하기 위한 자료구조라고 할 수 있다.
    - 서로소 집합 자료구조는 union과 find 이 2개의 연산으로 조작할 수 있다.
        -union : 2개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산.
        -find : 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산.

    -알고리즘 : 
        1. union연산을 확인하여, 서로 연결된 두 노드 A,B를 확인한다.
            I. A와 B의 루트노드 A,B를 각각 찾는다.
            II. A를 B의 부모 노드로 설정한다 (B가 A를 가리키도록 한다.)
        2. 모든 union(합집합)연산을 처리할 때 까지 1번 과정을 반복한다.

    -code : ex1.py 참조.

Ex)
    S = {1,2,3,4,5,6}
        union1,4(1과4는 같은집합)    union 2,3(2와3은 같은집합)
        union2,4(2와4는 같은집합)    union 5,6(5와6은 같은집합)
    이러한 union연산들은 그래프 형태로 표현될 수도 있다. 각 원소는 그래프에서의 노드로 표현되고, 같은 집합에 속한다는 정보를 담은 union 연산들은 간선으로 표현된다.
    즉, 6개의 노드가 있고 4개의 간선이 존재하는 그래프로 바꾸어 생각할 수 있다.

    유의할 점은 다음 그래프는 union의 관계를 효과적으로 보여주기 위해 그래프 형태로 시각화할 수 있다는 의미를 보여주기 위해 보여주는 것 이다.
    즉, 트리 구조상 번호가 작은 노드가 부모가 되고, 번호가 큰 노드가 자식이 된다.


step 0)
    초기 단계에서는 가장 먼저 노드의 개수 크기의 부모 테이블을 초기화 한다. 이때 모든 원소가 자기 자신을 부모로 가지도록 설정.
    부모 테이블은 말 그대로 부모에 대한 정보만을 담고있다. 다시 말해 특정한 노드의 부모에 대해서만 저장하고있는것이다.
step 1)
    첫 번째 union 연산을 확인하면, 1과 4를 합친다. 이때는 노드 1과 노드4의 루트 노드를 각각 찾으면 된다.
    현재 루트 노드는 각각 1과 4이기 때문에 더 큰 번호에 해당하는 루트 노드 4의 부모를 1로 설정한다.
....

서로소 집합을 활용한 사이클 판별
    서로소 집합은 다양한 알고리즘에 사용될 수 있다. 특히 서로소 집합은 무방향 그래프 내에서의 사이클을 판별할 때 사용할 수 있다는 특징이 있다.
    참고로 방향 그래프에서의 사이클 여부는 DFS를 이용하여 판별할 수 있다.

    -알고리즘 : 
        1. 각 간선을 확인하며 두 노드의 루트 노드를 확인한다.
            I. 루트 노드가 서로 다르다면 두 노드에 대하여 union 연산을 수행한다.
            II. 루트 노드가 서로 같다면 사이클이 발생한 것이다.
        2. 그래프에 포함되어 있는 모든 간선에 대하여 1번 과정을 반복한다.

    -code : ex2.py 참조.


2. 신장 트리
    -하나의 그래프가 있을 때 모든 노드를 포함하면서 사이클이 존재하지 않는 부분 그래프를 의미.
    -이때 모든 노드가 포함되어 서로 연결되면서 사이클이 존재하지 않는다는 조건은 트리의 성립조건 이기도 하다.

    - 크루스칼 알고리즘
        : 신장 트리 중에서 최소 비용으로 만들 수 있는 신장 트리를 찾는 알고리즘을 '최소 신장 트리 알고리즘'이라고 한다.
